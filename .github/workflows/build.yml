name: Windows Extension Build (php-windows-builder)

# Trigger the workflow on every push to 'main', on pull requests, and when a release is published
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    # Use the stable windows-2022 runner image, which includes VS17 (Visual Studio 2022).
    runs-on: windows-2022
    permissions:
      contents: read

    # Define outputs to pass the version string to the release job
    outputs:
      extension_version: ${{ steps.get_version.outputs.version }}

    strategy:
      fail-fast: false
      matrix:
        # The required PHP versions
        php-version: ['8.2', '8.3', '8.4']
        # 64-bit and 32-bit architecture
        arch: ['x64', 'x86']
        # Thread Safe (ts) and Non-Thread Safe (nts) Builds
        ts: ['ts', 'nts']

    steps:
      - name: Checkout Extension Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 1: Get the exact version string from the C header file
      - name: Get Extension Version
        id: get_version
        shell: powershell
        # Searches php_mysqlnd_parsec.h for the version definition and sets it as an output
        run: |
          # Use the correct define name: PHP_MARIADB_AUTH_PLUGIN_VERSION
          $version = Get-Content "php_mysqlnd_parsec.h" | Select-String -Pattern '#define PHP_MARIADB_AUTH_PLUGIN_VERSION'
          $version = $version -split '"'
          Write-Host "##[set-output name=version]$($version[1])"
        continue-on-error: false

      # Step 2: Build the extension using the php-windows-builder
      - name: Build Extension (PHP ${{ matrix.php-version }} - ${{ matrix.ts }} - ${{ matrix.arch }})
        uses: php/php-windows-builder/extension@v1
        with:
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}
          extension-url: https://github.com/9EOR9/mysqlnd_parsec
          args: --with-mysqlnd_parsec
          libs:
            - openssl-3
            - libsodium-1

      # Step 3: Upload the created DLLs as workflow artifacts
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mysqlnd_parsec-${{ steps.get_version.outputs.version }}-${{ matrix.php-version }}-${{ matrix.ts }}-${{ matrix.arch }}
          path: build/**/php_mysqlnd_parsec.dll
          if-no-files-found: error

# release:
#   runs-on: ubuntu-latest
#   # Wait for the build job to complete
#   needs: build
#   # Only run this job when the workflow was triggered by a published release
#   if: ${{ github.event_name == 'release' }}

#   permissions:
#     contents: write

#   steps:
#     - name: Download all built artifacts
#       uses: actions/download-artifact@v4
#       with:
#         pattern: mysqlnd_parsec-*
#         path: artifacts

#     # Step 4: Consolidate and Rename DLLs
#     - name: Consolidate and Rename DLLs
#       shell: bash
#       run: |
#         mkdir release_assets
#         # Loop through every downloaded artifact directory (e.g., artifacts/mysqlnd_parsec-1.0.0-8.4-nts-x64)
#         for artifact_dir in artifacts/*; do
#           # Extract the full version/matrix info from the directory name
#           MATRIX_INFO=$(basename "$artifact_dir")

#           # Find the single DLL file inside the artifact directory (which might be in a subdir)
#           DLL_FILE=$(find "$artifact_dir" -name "*.dll" | head -n 1)

#           if [ -n "$DLL_FILE" ]; then
#               # Construct the final desired filename: php_mysqlnd_parsec-VERSION-PHP_MATRIX.dll
#               NEW_NAME="php_mysqlnd_parsec-$MATRIX_INFO.dll"

#               echo "Renaming $DLL_FILE to $NEW_NAME"
#               cp "$DLL_FILE" "release_assets/$NEW_NAME"
#           else
#               echo "Warning: No DLL found in $artifact_dir. Skipping."
#           fi
#         done

#     # Step 5: Upload all consolidated and correctly named DLLs to the GitHub Release
#     - name: Upload Release Assets
#       uses: softprops/action-gh-release@v1
#       with:
#         files: release_assets/*
#         tag_name: ${{ github.event.release.tag_name }}
#         token: ${{ secrets.GITHUB_TOKEN }}
#         overwrite: true

